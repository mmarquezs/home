#+TITLE: init.el
#+PROPERTY: header-args :tangle yes :results silent

* Initial Setup
** Setting up MELPA

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
#+END_SRC

** Install use-package if missing

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC
* Global Configs
#+BEGIN_SRC emacs-lisp
;;No permissions for your file? Ask sudo and he will give you the power to open it!
(defadvice ido-find-file (after find-file-sudo activate)
  "Find file as root if necessary."
  (unless (and buffer-file-name
               (file-writable-p buffer-file-name))
;; Enable trucate on sql
(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (toggle-truncate-lines t)))
;;Disable top menu bar
(menu-bar-mode -99)

;;Disable  toolbar
(tool-bar-mode -1)

;; If emacs is run in a terminal, the clipboard- functions have no
;; effect. Instead, we use of xsel, see
;; http://www.vergenet.net/~conrad/software/xsel/ -- "a command-line
;; program for getting and setting the contents of the X selection"
(unless window-system
  (when (getenv "DISPLAY")
    ;; Callback for when user cuts
    (defun xsel-cut-function (text &optional push)
      ;; Insert text to temp-buffer, and "send" content to xsel stdin
      (with-temp-buffer
	(insert text)
	;; I prefer using the "clipboard" selection (the one the
	;; typically is used by c-c/c-v) before the primary selection
	;; (that uses mouse-select/middle-button-click)
	(call-process-region (point-min) (point-max) "xsel" nil 0 nil "--clipboard" "--input")))
    ;; Call back for when user pastes
    (defun xsel-paste-function()
      ;; Find out what is current selection by xsel. If it is different
      ;; from the top of the kill-ring (car kill-ring), then return
      ;; it. Else, nil is returned, so whatever is in the top of the
      ;; kill-ring will be used. 
      (let ((xsel-output (shell-command-to-string "xsel --clipboard --output")))
	(unless (string= (car kill-ring) xsel-output)
	  xsel-output )))
    ;; Attach callbacks to hooks
    (setq interprogram-cut-function 'xsel-cut-function)
    (setq interprogram-paste-function 'xsel-paste-function)
    ;; Idea from
    ;; http://shreevatsa.wordpress.com/2006/10/22/emacs-copypaste-and-x/
    ;; http://www.mail-archive.com/help-gnu-emacs@gnu.org/msg03577.html
    ))


;;HIDE Compilation buffer if there isn't any error
(setq compilation-finish-function
  (lambda (buf str)
    (if (null (string-match ".*exited abnormally.*" str))
        ;;no errors, make the compilation window go away in a few seconds
        (progn
          (run-at-time
           "0.5 sec" nil 'delete-windows-on
           (get-buffer-create "*compilation*"))
          (message "No Compilation Errors!")))))


#+END_SRC

* General Packages

** Key-Chord
#+BEGIN_SRC emacs-lisp
(use-package key-chord
  :ensure t
  :config (key-chord-mode 1))
#+END_SRC

** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config (evil-mode 1)
  (key-chord-define evil-insert-state-map "jk" 'evil-normal-state))
#+END_SRC

** Evil-Leader-Mode
#+BEGIN_SRC emacs-lisp
(use-package evil-leader
  :ensure t
  :config (evil-leader-mode)
  (evil-leader/set-leader "<SPC>"))
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config (yas-global-mode 1))
#+END_SRC

** auto-yasnippet
   #+BEGIN_SRC emacs-lisp
   (use-package auto-yasnippet
   :ensure t)
   #+END_SRC


** recentf
   #+BEGIN_SRC emacs-lisp
   (use-package recentf
   :ensure t
   :config (recentf-mode 1)
   (setq recentf-max-menu-items 25)
   :bind ("\C-x\ \C-r" . recentf-open-files))
   #+END_SRC


** ido
   #+BEGIN_SRC emacs-lisp
   (use-package ido
   :ensure t
   :config (ido-mode t)
   (ido-everywhere 1)
   (setq ido-enable-flex-matching t)
   (setq ido-use-faces nil))
   #+END_SRC


** flx-ido
   #+BEGIN_SRC emacs-lisp
   (use-package flx-ido
   :ensure t
   :config (flx-ido-mode 1))
   #+END_SRC


** company
   #+BEGIN_SRC emacs-lisp
   (use-package company
   :ensure t
   :config (add-hook 'after-init-hook 'global-company-mode))
   #+END_SRC

** smex
   #+BEGIN_SRC emacs-lisp
   (use-package smex
   :ensure t
   :config (smex-initialize)
   :bind (("M-x" . smex)
          ("M-X" . smex-major-mode-commands)
	  ("C-c C-c M-x" . execute-extended-command))
   #+END_SRC



* Language Specific Packages

** Python
*** elpy
   #+BEGIN_SRC emacs-lisp
   (use-package elpy
   :ensure t
   :config (elpy-enable))
   #+END_SRC

** Erlang
*** erlang-start
   #+BEGIN_SRC emacs-lisp
   (use-package erlang-start
   :ensure t)
   #+END_SRC

** Go
*** go-eldoc
    *System Packages Required*: gocode
   #+BEGIN_SRC emacs-lisp
   (use-package go-eldoc
   :ensure t)
   #+END_SRC
 
*** go-mode
    *System Packages Required*: godef, goimports
    #+BEGIN_SRC emacs-lisp
    (use-package go-mode
    :ensure t
    :config (setq goftm-command "goimports")
            (defun my-go-mode-hook () 
	      (local-set-key (kbd "C-.") 'godef-jump))
	      (set (make-local-variable 'company-backends) '(company-go))
	    (add-hook 'go-mode-hook 'my-go-mode-hook)
	    (add-hook 'go-mode-hook 'go-eldoc-setup)
	    (add-hook 'go-mode-hook 'company-mode))
    #+END_SRC




#+BEGIN_SRC emacs-lisp
(provide 'init)
;;; init.el ends here
#+END_SRC

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
;; End:
